<?xml version="1.0"?>
<!--
  =======================================================================

   Innomatic build file

   Copyright (c) 2008-2015 Innoteam Srl. All rights reserved.

  =======================================================================
-->
<project name="Innomatic" default="package">

	<property name="name" value="innomatic" />
	<property name="version" value="6.5.1" />

    <!--
    Helper target that initializes the project and creates the base
    directory structure.
    -->
    <target name="init" depends="initdir">
    </target>
	
	<target name="initdir">
        <!-- Create the source directory -->
        <mkdir dir="source" />

        <!-- Create the different build directories -->
        <mkdir dir="build/logs" />
        <mkdir dir="build/api" />
        <mkdir dir="build/coverage" />
        <mkdir dir="build/packages" />
	</target>

	<!--
    The clean target is used to remove build artifacts of previous builds. Otherwise
    Innomatic will present old, maybe successful result, even if your build
    process fails.
    -->
	<target name="clean">
		<!-- Remove old log files -->
		<delete>
			<fileset dir="${basedir}/build/logs" includes="**.*" />
		</delete>
		<!-- Remove old api documentation -->
        <!--
		<delete>
			<fileset dir="${basedir}/build/api" includes="**.*" />
		</delete>
        -->
		<!-- Remove old coverage report -->
		<delete>
			<fileset dir="${basedir}/build/coverage" includes="**.*" />
		</delete>
		<!-- Remove old packages -->
		<delete>
			<fileset dir="${basedir}/build/packages" includes="**.*" />
		</delete>
	</target>

	<target name="checkphp">
		<apply executable="php" failonerror="true">
			<arg value="-l" />
			<fileset dir="${basedir}/source">
				<include name="**/*.php" />
			</fileset>
		</apply>
	</target>

	<!--
   Generates the project documentation into the <project>/build/api directory.
   -->
    <target name="php-documentor">
		<exec executable="phpdoc" dir="${basedir}">
			<arg line="-d source -t ${basedir}/build/api" />
		</exec>
		<tar destfile="${basedir}/build/packages/${name}-${version}-api.tgz" compression="gzip">
			<tarfileset dir="${basedir}/build/api" prefix="${name}-api">
			</tarfileset>
		</tar>
	</target>

	<!--
   Execute code sniffer.
   The 'output' attribute for the exec element pipes the command line output into the
   <project>/build/logs/checkstyle.xml file.
  
   You should always declare the optional @error attribute for the codesniffer
   task. Otherwise all errors will be logged in the checkstyle.xml file, which
   results in an invalid xml document.
   -->
	<target name="php-codesniffer">
		<exec executable="phpcs" dir="${basedir}/source" error="/dev/null" output="${basedir}/build/logs/checkstyle.xml">
			<arg line="--report=checkstyle
	                 --standard=Zend
	                 --ignore=core/classes/innomatic/io/archive/archivers innomatic/" />
		</exec>
	</target>

	<target name="pdepend">
		<exec dir="${basedir}" executable="pdepend" failonerror="false">
			<arg line="--jdepend-xml=${basedir}/build/logs/jdepend.xml ." />
		</exec>
	</target>

	<!--
   Executes the project unit tests and stores the different logs in the
   <project>/build/logs directory. Furthermore it generates the coverage report
   under <project>/build/coverage.
   -->
	<target name="phpunit">
		<exec executable="phpunit" dir="${basedir}" failonerror="on">
			<arg line="tests/allTests.php" />
		</exec>
	</target>

	<target name="sources" depends="initdir,clean">
		<tar destfile="${basedir}/build/packages/${name}-src-${version}.tgz" compression="gzip">
			<tarfileset dir="${basedir}" prefix="${name}-src">
				<exclude name="**/.svn/**" />
				<exclude name="${basedir}/build/packages/**" />
				<exclude name="build/packages/**" />
				<exclude name="nbproject/**" />
				<exclude name="project.index" />
				<exclude name=".project" />
				<exclude name=".settings/**" />
				<exclude name=".cache/**" />
			</tarfileset>
		</tar>
	</target>

	<target name="package" depends="initdir,clean">
		<tar destfile="${basedir}/build/packages/${name}-${version}.tgz" compression="gzip">
			<tarfileset dir="${basedir}/source" prefix="${name}">
				<exclude name="**/.cvsignore" />
				<exclude name="**/.svn/**" />
				<exclude name="build/**" />
				<exclude name="nbproject/**" />
				<exclude name="innomatic.iss" />
				<exclude name="project.index" />
				<exclude name=".project" />
				<exclude name=".settings/**" />
				<exclude name=".cache/**" />
				<exclude name="build.xml" />
				<exclude name="insticon.ico" />
			</tarfileset>
		</tar>
	</target>

	 <!--
    The default build target for this project. It simply depends on all sub tasks
    that perform the project build. The sub targets are executed in the listed
    order.
   
    1. 'clean' Clean old project build artifacts
    2. 'checkout' Update project working copy
    3. 'checkphp' Execute a code lint
    4. 'php-documentor' Generate api documentation
    5. 'php-codesniffer' Check for coding violations.
    6. 'phpunit' Execute unit tests, generate metrics, coverage etc.
    7. 'sources' Creation of sources package
    8. 'package' Creation of installation package
    -->
	<target name="build" depends="init,clean,checkphp,php-documentor,php-codesniffer,phpunit,sources,package" />

    <!--
    This target deploys the package to an installed Innomatic in a local Vagrant.
    -->
	<target name="dev" depends="package">
        <exec executable="scp">
            <arg value="${basedir}/build/packages/${name}-${version}.tgz" />
            <arg value="innomatic-dev:/tmp/" />
        </exec>

        <exec executable="ssh">
            <arg value="innomatic-dev" />
            <arg value="-C" />
            <arg value="php" />
            <arg value="/vagrant/dev/innomatic/core/scripts/application.php" />
            <arg value="deploy" />
            <arg value="/tmp/${name}-${version}.tgz" />
        </exec>
	</target>

</project>
